//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PaymentTransaction.BusinessLogic
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TechnicalAssignmentEntities : DbContext
    {
        public TechnicalAssignmentEntities()
            : base("name=TechnicalAssignmentEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<payment_transaction> payment_transaction { get; set; }
    
        public virtual ObjectResult<uspGetTransByCurrency_Result> uspGetTransByCurrency(string currencyType)
        {
            var currencyTypeParameter = currencyType != null ?
                new ObjectParameter("CurrencyType", currencyType) :
                new ObjectParameter("CurrencyType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetTransByCurrency_Result>("uspGetTransByCurrency", currencyTypeParameter);
        }
    
        public virtual ObjectResult<uspGetTransByDateRange_Result> uspGetTransByDateRange(string fromDate, string toDate)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetTransByDateRange_Result>("uspGetTransByDateRange", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<uspGetTransByStatus_Result> uspGetTransByStatus(string statusCode)
        {
            var statusCodeParameter = statusCode != null ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetTransByStatus_Result>("uspGetTransByStatus", statusCodeParameter);
        }
    }
}
